package hr.sdo.bootcamp.model.views;

import oracle.jbo.RowIterator;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.EntityImpl;
import oracle.jbo.server.ViewRowImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Thu Nov 07 10:14:15 CET 2013
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class SdoDepartmentsViewRowImpl extends ViewRowImpl {


    public static final int ENTITY_DEPARTMENTS = 0;

    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. Do not modify.
     */
    public enum AttributesEnum {
        DepartmentId {
            public Object get(SdoDepartmentsViewRowImpl obj) {
                return obj.getDepartmentId();
            }

            public void put(SdoDepartmentsViewRowImpl obj, Object value) {
                obj.setDepartmentId((Integer)value);
            }
        }
        ,
        DepartmentName {
            public Object get(SdoDepartmentsViewRowImpl obj) {
                return obj.getDepartmentName();
            }

            public void put(SdoDepartmentsViewRowImpl obj, Object value) {
                obj.setDepartmentName((String)value);
            }
        }
        ,
        LocationId {
            public Object get(SdoDepartmentsViewRowImpl obj) {
                return obj.getLocationId();
            }

            public void put(SdoDepartmentsViewRowImpl obj, Object value) {
                obj.setLocationId((Integer)value);
            }
        }
        ,
        ManagerId {
            public Object get(SdoDepartmentsViewRowImpl obj) {
                return obj.getManagerId();
            }

            public void put(SdoDepartmentsViewRowImpl obj, Object value) {
                obj.setManagerId((Integer)value);
            }
        }
        ,
        TotalSallary {
            public Object get(SdoDepartmentsViewRowImpl obj) {
                return obj.getTotalSallary();
            }

            public void put(SdoDepartmentsViewRowImpl obj, Object value) {
                obj.setTotalSallary((Long)value);
            }
        }
        ,
        EmployeeCount {
            public Object get(SdoDepartmentsViewRowImpl obj) {
                return obj.getEmployeeCount();
            }

            public void put(SdoDepartmentsViewRowImpl obj, Object value) {
                obj.setEmployeeCount((Long)value);
            }
        }
        ,
        MaxSalary {
            public Object get(SdoDepartmentsViewRowImpl obj) {
                return obj.getMaxSalary();
            }

            public void put(SdoDepartmentsViewRowImpl obj, Object value) {
                obj.setMaxSalary((Long)value);
            }
        }
        ,
        MinSalary {
            public Object get(SdoDepartmentsViewRowImpl obj) {
                return obj.getMinSalary();
            }

            public void put(SdoDepartmentsViewRowImpl obj, Object value) {
                obj.setMinSalary((Long)value);
            }
        }
        ,
        SdoEmployeesView {
            public Object get(SdoDepartmentsViewRowImpl obj) {
                return obj.getSdoEmployeesView();
            }

            public void put(SdoDepartmentsViewRowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ;
        private static AttributesEnum[] vals = null;
        private static int firstIndex = 0;

        public abstract Object get(SdoDepartmentsViewRowImpl object);

        public abstract void put(SdoDepartmentsViewRowImpl object, Object value);

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int DEPARTMENTID = AttributesEnum.DepartmentId.index();
    public static final int DEPARTMENTNAME = AttributesEnum.DepartmentName.index();
    public static final int LOCATIONID = AttributesEnum.LocationId.index();
    public static final int MANAGERID = AttributesEnum.ManagerId.index();
    public static final int TOTALSALLARY = AttributesEnum.TotalSallary.index();
    public static final int EMPLOYEECOUNT = AttributesEnum.EmployeeCount.index();
    public static final int MAXSALARY = AttributesEnum.MaxSalary.index();
    public static final int MINSALARY = AttributesEnum.MinSalary.index();
    public static final int SDOEMPLOYEESVIEW = AttributesEnum.SdoEmployeesView.index();

    /**
     * This is the default constructor (do not remove).
     */
    public SdoDepartmentsViewRowImpl() {
    }

    /**
     * Gets Departments entity object.
     * @return the Departments
     */
    public EntityImpl getDepartments() {
        return (EntityImpl)getEntity(ENTITY_DEPARTMENTS);
    }

    /**
     * Gets the attribute value for DEPARTMENT_ID using the alias name DepartmentId.
     * @return the DEPARTMENT_ID
     */
    public Integer getDepartmentId() {
        return (Integer) getAttributeInternal(DEPARTMENTID);
    }

    /**
     * Sets <code>value</code> as attribute value for DEPARTMENT_ID using the alias name DepartmentId.
     * @param value value to set the DEPARTMENT_ID
     */
    public void setDepartmentId(Integer value) {
        setAttributeInternal(DEPARTMENTID, value);
    }

    /**
     * Gets the attribute value for DEPARTMENT_NAME using the alias name DepartmentName.
     * @return the DEPARTMENT_NAME
     */
    public String getDepartmentName() {
        return (String) getAttributeInternal(DEPARTMENTNAME);
    }

    /**
     * Sets <code>value</code> as attribute value for DEPARTMENT_NAME using the alias name DepartmentName.
     * @param value value to set the DEPARTMENT_NAME
     */
    public void setDepartmentName(String value) {
        setAttributeInternal(DEPARTMENTNAME, value);
    }

    /**
     * Gets the attribute value for LOCATION_ID using the alias name LocationId.
     * @return the LOCATION_ID
     */
    public Integer getLocationId() {
        return (Integer) getAttributeInternal(LOCATIONID);
    }

    /**
     * Sets <code>value</code> as attribute value for LOCATION_ID using the alias name LocationId.
     * @param value value to set the LOCATION_ID
     */
    public void setLocationId(Integer value) {
        setAttributeInternal(LOCATIONID, value);
    }

    /**
     * Gets the attribute value for MANAGER_ID using the alias name ManagerId.
     * @return the MANAGER_ID
     */
    public Integer getManagerId() {
        return (Integer) getAttributeInternal(MANAGERID);
    }

    /**
     * Sets <code>value</code> as attribute value for MANAGER_ID using the alias name ManagerId.
     * @param value value to set the MANAGER_ID
     */
    public void setManagerId(Integer value) {
        setAttributeInternal(MANAGERID, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TotalSallary.
     * @return the TotalSallary
     */
    public Long getTotalSallary() {
        return (Long) getAttributeInternal(TOTALSALLARY);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TotalSallary.
     * @param value value to set the  TotalSallary
     */
    public void setTotalSallary(Long value) {
        setAttributeInternal(TOTALSALLARY, value);
    }

    /**
     * Gets the attribute value for the calculated attribute EmployeeCount.
     * @return the EmployeeCount
     */
    public Long getEmployeeCount() {
        return (Long) getAttributeInternal(EMPLOYEECOUNT);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute EmployeeCount.
     * @param value value to set the  EmployeeCount
     */
    public void setEmployeeCount(Long value) {
        setAttributeInternal(EMPLOYEECOUNT, value);
    }

    /**
     * Gets the attribute value for the calculated attribute MaxSalary.
     * @return the MaxSalary
     */
    public Long getMaxSalary() {
        return (Long) getAttributeInternal(MAXSALARY);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute MaxSalary.
     * @param value value to set the  MaxSalary
     */
    public void setMaxSalary(Long value) {
        setAttributeInternal(MAXSALARY, value);
    }

    /**
     * Gets the attribute value for the calculated attribute MinSalary.
     * @return the MinSalary
     */
    public Long getMinSalary() {
        return (Long) getAttributeInternal(MINSALARY);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute MinSalary.
     * @param value value to set the  MinSalary
     */
    public void setMinSalary(Long value) {
        setAttributeInternal(MINSALARY, value);
    }

    /**
     * Gets the associated <code>RowIterator</code> using master-detail link SdoEmployeesView.
     */
    public RowIterator getSdoEmployeesView() {
        return (RowIterator)getAttributeInternal(SDOEMPLOYEESVIEW);
    }

    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }
}
